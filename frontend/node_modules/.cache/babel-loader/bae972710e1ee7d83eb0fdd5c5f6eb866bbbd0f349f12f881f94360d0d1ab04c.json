{"ast":null,"code":"import axios from \"axios\";\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8000\",\n  timeout: 60000,\n  // 60 seconds timeout for file processing\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error(\"Request interceptor error:\", error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4;\n  console.error(\"API Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Handle specific error cases\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 413) {\n    throw new Error(\"File too large. Please select a file smaller than 10MB.\");\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 422) {\n    throw new Error(\"Invalid file format. Please upload PDF, DOCX, or TXT files only.\");\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 500) {\n    throw new Error(\"Server error. Please try again later.\");\n  } else if (error.code === \"ECONNABORTED\") {\n    throw new Error(\"Request timeout. Please try again.\");\n  }\n  throw error;\n});\n\n// API methods\nexport const apiService = {\n  // Health check\n  async healthCheck() {\n    const response = await api.get(\"/health\");\n    return response.data;\n  },\n  // Upload resume file\n  async uploadResume(file) {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const response = await api.post(\"/api/upload-resume\", formData);\n    return response.data;\n  },\n  // Analyze resume and job description\n  async analyzeMatch(resumeText, jobDescription, resumeFile = null) {\n    const formData = new FormData();\n    formData.append(\"resume_text\", resumeText);\n    formData.append(\"job_description\", jobDescription);\n    if (resumeFile) {\n      formData.append(\"resume_file\", resumeFile);\n    }\n    const response = await api.post(\"/api/analyze\", formData);\n    return response.data;\n  },\n  // Analyze with file upload only\n  async analyzeWithFile(jobDescription, resumeFile) {\n    const formData = new FormData();\n    formData.append(\"job_description\", jobDescription);\n    formData.append(\"resume_file\", resumeFile);\n    const response = await api.post(\"/api/analyze-with-file\", formData);\n    return response.data;\n  },\n  // Get supported skills\n  async getSupportedSkills() {\n    const response = await api.get(\"/api/skills\");\n    return response.data;\n  },\n  // Get API stats\n  async getApiStats() {\n    const response = await api.get(\"/api/stats\");\n    return response.data;\n  }\n};\n\n// Utility functions for file handling\nexport const fileUtils = {\n  // Validate file type\n  isValidFileType(file) {\n    const validTypes = [\"application/pdf\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", \"application/msword\", \"text/plain\"];\n    return validTypes.includes(file.type) || file.name.match(/\\.(pdf|docx|doc|txt)$/i);\n  },\n  // Validate file size (10MB limit)\n  isValidFileSize(file) {\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    return file.size <= maxSize;\n  },\n  // Format file size for display\n  formatFileSize(bytes) {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  },\n  // Get file extension\n  getFileExtension(filename) {\n    var _filename$split$pop;\n    return (_filename$split$pop = filename.split(\".\").pop()) === null || _filename$split$pop === void 0 ? void 0 : _filename$split$pop.toLowerCase();\n  }\n};\n\n// Score interpretation utilities\nexport const scoreUtils = {\n  // Get score category\n  getScoreCategory(score) {\n    if (score >= 85) return \"excellent\";\n    if (score >= 70) return \"good\";\n    if (score >= 50) return \"fair\";\n    return \"poor\";\n  },\n  // Get score color class\n  getScoreColorClass(score) {\n    const category = this.getScoreCategory(score);\n    return `score-${category}`;\n  },\n  // Get score description\n  getScoreDescription(score) {\n    const category = this.getScoreCategory(score);\n    const descriptions = {\n      excellent: \"Excellent match! Your resume aligns very well with this job.\",\n      good: \"Good match! Minor optimizations could improve your chances.\",\n      fair: \"Fair match. Consider significant improvements to better align.\",\n      poor: \"Poor match. Major changes needed to meet job requirements.\"\n    };\n    return descriptions[category];\n  },\n  // Get priority color\n  getPriorityColor(priority) {\n    const colors = {\n      high: \"text-danger-600 bg-danger-50\",\n      medium: \"text-warning-600 bg-warning-50\",\n      low: \"text-success-600 bg-success-50\"\n    };\n    return colors[priority] || colors.medium;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response4","data","message","status","Error","code","apiService","healthCheck","get","uploadResume","file","formData","FormData","append","post","analyzeMatch","resumeText","jobDescription","resumeFile","analyzeWithFile","getSupportedSkills","getApiStats","fileUtils","isValidFileType","validTypes","includes","type","name","match","isValidFileSize","maxSize","size","formatFileSize","bytes","k","sizes","i","Math","floor","parseFloat","pow","toFixed","getFileExtension","filename","_filename$split$pop","split","pop","toLowerCase","scoreUtils","getScoreCategory","score","getScoreColorClass","category","getScoreDescription","descriptions","excellent","good","fair","poor","getPriorityColor","priority","colors","high","medium","low"],"sources":["/Users/jayvora/Desktop/Resume-Analyze/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || \"http://localhost:8000\",\n  timeout: 60000, // 60 seconds timeout for file processing\n  headers: {\n    \"Content-Type\": \"multipart/form-data\",\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(\n      `Making ${config.method?.toUpperCase()} request to ${config.url}`\n    );\n    return config;\n  },\n  (error) => {\n    console.error(\"Request interceptor error:\", error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error(\"API Error:\", error.response?.data || error.message);\n\n    // Handle specific error cases\n    if (error.response?.status === 413) {\n      throw new Error(\n        \"File too large. Please select a file smaller than 10MB.\"\n      );\n    } else if (error.response?.status === 422) {\n      throw new Error(\n        \"Invalid file format. Please upload PDF, DOCX, or TXT files only.\"\n      );\n    } else if (error.response?.status === 500) {\n      throw new Error(\"Server error. Please try again later.\");\n    } else if (error.code === \"ECONNABORTED\") {\n      throw new Error(\"Request timeout. Please try again.\");\n    }\n\n    throw error;\n  }\n);\n\n// API methods\nexport const apiService = {\n  // Health check\n  async healthCheck() {\n    const response = await api.get(\"/health\");\n    return response.data;\n  },\n\n  // Upload resume file\n  async uploadResume(file) {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    const response = await api.post(\"/api/upload-resume\", formData);\n    return response.data;\n  },\n\n  // Analyze resume and job description\n  async analyzeMatch(resumeText, jobDescription, resumeFile = null) {\n    const formData = new FormData();\n    formData.append(\"resume_text\", resumeText);\n    formData.append(\"job_description\", jobDescription);\n\n    if (resumeFile) {\n      formData.append(\"resume_file\", resumeFile);\n    }\n\n    const response = await api.post(\"/api/analyze\", formData);\n    return response.data;\n  },\n\n  // Analyze with file upload only\n  async analyzeWithFile(jobDescription, resumeFile) {\n    const formData = new FormData();\n    formData.append(\"job_description\", jobDescription);\n    formData.append(\"resume_file\", resumeFile);\n\n    const response = await api.post(\"/api/analyze-with-file\", formData);\n    return response.data;\n  },\n\n  // Get supported skills\n  async getSupportedSkills() {\n    const response = await api.get(\"/api/skills\");\n    return response.data;\n  },\n\n  // Get API stats\n  async getApiStats() {\n    const response = await api.get(\"/api/stats\");\n    return response.data;\n  },\n};\n\n// Utility functions for file handling\nexport const fileUtils = {\n  // Validate file type\n  isValidFileType(file) {\n    const validTypes = [\n      \"application/pdf\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n      \"application/msword\",\n      \"text/plain\",\n    ];\n    return (\n      validTypes.includes(file.type) ||\n      file.name.match(/\\.(pdf|docx|doc|txt)$/i)\n    );\n  },\n\n  // Validate file size (10MB limit)\n  isValidFileSize(file) {\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    return file.size <= maxSize;\n  },\n\n  // Format file size for display\n  formatFileSize(bytes) {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  },\n\n  // Get file extension\n  getFileExtension(filename) {\n    return filename.split(\".\").pop()?.toLowerCase();\n  },\n};\n\n// Score interpretation utilities\nexport const scoreUtils = {\n  // Get score category\n  getScoreCategory(score) {\n    if (score >= 85) return \"excellent\";\n    if (score >= 70) return \"good\";\n    if (score >= 50) return \"fair\";\n    return \"poor\";\n  },\n\n  // Get score color class\n  getScoreColorClass(score) {\n    const category = this.getScoreCategory(score);\n    return `score-${category}`;\n  },\n\n  // Get score description\n  getScoreDescription(score) {\n    const category = this.getScoreCategory(score);\n    const descriptions = {\n      excellent: \"Excellent match! Your resume aligns very well with this job.\",\n      good: \"Good match! Minor optimizations could improve your chances.\",\n      fair: \"Fair match. Consider significant improvements to better align.\",\n      poor: \"Poor match. Major changes needed to meet job requirements.\",\n    };\n    return descriptions[category];\n  },\n\n  // Get priority color\n  getPriorityColor(priority) {\n    const colors = {\n      high: \"text-danger-600 bg-danger-50\",\n      medium: \"text-warning-600 bg-warning-50\",\n      low: \"text-success-600 bg-success-50\",\n    };\n    return colors[priority] || colors.medium;\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}